# ============================================================================
# Dotfiles Installation Configuration
# ============================================================================
# Automated setup for development environment using Dotbot
# Run with: ./install

# ============================================================================
# CONFIGURATION DEFAULTS
# ============================================================================
- defaults:
    link:
      create: true
      relink: true
      force: true

- clean: ["~"]

- link:
    # Shell configuration
    ~/.bashrc: config/bash/bashrc
    ~/.inputrc: config/inputrc
    ~/.config/bash: config/bash

    # Terminal and editor
    ~/.config/alacritty: config/alacritty
    ~/.config/nvim: config/nvim
    ~/.config/powerline-shell/config.json: config/powerline-shell/config.json

    # Development tools
    ~/.gdbinit: config/gdbinit
    ~/.pdbrc.py: config/pdbrc.py
    ~/.config/lazygit: config/lazygit

    # Git configuration
    ~/.gitconfig: config/git/gitconfig
    ~/.gitignore: config/git/gitignore

    # SSH and security
    ~/.ssh/config: config/ssh/config
    ~/.local/bin/pass-4-ssh.sh: config/ssh-add-pass/pass-4-ssh.sh
    ~/.local/bin/ssh-add-4-pass: config/ssh-add-pass/ssh-add-4-pass

# ============================================================================
# SYSTEM PACKAGES
# ============================================================================
- shell:
    - description: == Install Core System Packages ==
      stdout: true
      stderr: true
      command: |
        sudo apt install -y \
          ca-certificates \
          curl \
          fd-find \
          git \
          git-lfs \
          gnupg \
          htop \
          httpie \
          libssl-dev \
          lsb-release \
          pass \
          pipx \
          plocate \
          python-is-python3 \
          python3-full \
          ripgrep \
          ssh \
          webext-browserpass \
          wget

    - description: == Install Development Packages ==
      stdout: true
      stderr: true
      command: |
        sudo apt install -y \
          apt-utils \
          alacritty \
          bison \
          build-essential \
          chafa \
          clang clang-tidy clang-format \
          cmake \
          cmake-curses-gui \
          direnv \
          doxygen \
          ffmpeg \
          flex \
          golang \
          graphviz \
          hdf5-tools \
          libboost-all-dev \
          libcanberra-gtk-module \
          libceres-dev \
          libeigen3-dev \
          libfreetype-dev \
          libglew-dev \
          libglfw3-dev \
          libgmock-dev \
          libgtest-dev \
          libhdf5-dev \
          libimgui-dev \
          libogre-1.12-dev \
          libopencv-dev \
          libprotobuf-dev \
          libusb-1.0-0-dev \
          luarocks \
          ninja-build \
          nodejs \
          npm \
          pandoc \
          protobuf-compiler \
          python3-dev \
          python3-pip \
          python3-venv \
          python3-pytest \
          python3-pynvim \
          software-properties-common \
          unzip

    # ============================================================================
    # DEVELOPMENT TOOLS
    # ============================================================================
    - description: == Install Rust Toolchain ==
      stdout: true
      command: |
        command -v rustup >/dev/null 2>&1 || \
          sh <(curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf) -y --no-modify-path

    - description: == Install UV (Python Package Manager) ==
      stdout: true
      command: |
        command -v uv >/dev/null 2>&1 || \
          curl -LsSf https://astral.sh/uv/install.sh | sh

    - description: == Install JetBrains Mono Nerd Font ==
      stdout: true
      command: |
        if [[ ! -f ~/.fonts/JetBrainsMonoNLNerdFontMono-Regular.ttf ]]; then
          mkdir -p ~/.fonts
          wget -qO- "https://github.com/ryanoasis/nerd-fonts/releases/latest/download/JetBrainsMono.tar.xz" | \
            tar xvJ -C ~/.fonts/
          fc-cache -fv ~/.fonts
        fi

    - description: == Install NeoVim (Latest AppImage) ==
      stdout: true
      command: |
        curl -# -L --output "$HOME/.local/bin/nvim.appimage" \
          https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
        chmod u+x "$HOME/.local/bin/nvim.appimage"

    - description: == Install LazyGit ==
      stdout: true
      command: |
        if [[ ! -f ~/.local/bin/lazygit ]]; then
          LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | \
            grep -Po '"tag_name": "v\K[^"]*')
          mkdir -p ~/.local/share/lazygit
          wget -qO- "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz" | \
            tar xvz -C ~/.local/share/lazygit
          install ~/.local/share/lazygit/lazygit ~/.local/bin/
        fi

    - description: == Install Powerline Shell ==
      stdout: true
      stderr: true
      command: |
        sudo apt install -y powerline-gitstatus python3-powerline fonts-powerline
        if [[ ! -d /usr/src/powerline-shell ]]; then
          sudo git clone https://github.com/b-ryan/powerline-shell /usr/src/powerline-shell
          cd /usr/src/powerline-shell && sudo python setup.py install
        fi

    - description: == Install FZF (Fuzzy Finder) ==
      stdout: true
      command: |
        if [[ ! -d ~/dev/src/github/fzf ]]; then
          git clone --branch v0.64.0 https://github.com/junegunn/fzf.git ~/dev/src/github/fzf
        fi
        if [[ ! -f ~/dev/src/github/fzf/bin/fzf ]]; then
          make -C ~/dev/src/github/fzf install
        fi
        command -v fzf >/dev/null 2>&1 || \
          (cd ~/dev/src/github/fzf && ./install --key-bindings --completion --no-update-rc)

    - description: == Install Docker ==
      stdout: true
      stderr: true
      command: |
        if [[ ! -f /etc/apt/sources.list.d/docker.list ]]; then
          # Add Docker's official GPG key and repository
          sudo mkdir -m 0755 -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
            sudo gpg --yes --dearmor -o /etc/apt/keyrings/docker.gpg

          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

          # Install Docker packages
          sudo apt update
          sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

          # Add user to docker group
          sudo groupadd docker 2>/dev/null || true
          sudo usermod -aG docker $USER
          newgrp docker
        fi

    # ============================================================================
    # SECURITY AND CREDENTIALS
    # ============================================================================
    - description: == Setup Password Store ==
      stdout: true
      command: |
        if [[ ! -d ~/.password-store/ ]]; then
          echo "== Grab your GitHub token for authentication! =="
          git clone https://nonifier@github.com/nonifier/password-store.git ~/.password-store/
          pass git remote set-url origin git@github.com:nonifier/password-store.git
        fi

    - description: == Install Password Store Host App for Firefox ==
      stdout: true
      command: |
        [[ -f ~/.mozilla/native-messaging-hosts/passff.py ]] || \
          curl -sSL github.com/passff/passff-host/releases/latest/download/install_host_app.sh | bash -s -- firefox

    - description: == Import and Trust GPG Key ==
      stdout: true
      command: |
        if [[ ! -f ~/.gnupg/woam@nonifier.com.priv ]]; then
          echo "WARNING: Please install ~/.gnupg/woam@nonifier.com.priv"
        else
          gpg --import ~/.gnupg/woam@nonifier.com.priv
          echo $(gpg --list-keys | rg -B1 woam@nonifier | head -1 | tr -d '[:space:]'):6: | gpg --import-ownertrust
        fi

    - description: == Setup SSH Keys ==
      stdout: true
      command: |
        # Create SSH directories with proper permissions
        mkdir -p ~/.ssh/{nonifier,prophesee}
        chmod 0700 ~/.ssh/{nonifier,prophesee}

        # Extract SSH keys from password-store
        if [[ ! -f ~/.ssh/nonifier/id_rsa ]]; then
          pass ssh/id_rsa.priv > ~/.ssh/nonifier/id_rsa
          chmod 600 ~/.ssh/nonifier/id_rsa
        fi
        [[ -f ~/.ssh/nonifier/id_rsa.pub ]] || pass ssh/id_rsa.pub > ~/.ssh/nonifier/id_rsa.pub

        if [[ ! -f ~/.ssh/prophesee/id_ed25519 ]]; then
          pass prophesee/ssh/id_ed25519.priv > ~/.ssh/prophesee/id_ed25519
          chmod 600 ~/.ssh/prophesee/id_ed25519
        fi
        [[ -f ~/.ssh/prophesee/id_ed25519.pub ]] || pass prophesee/ssh/id_ed25519.pub > ~/.ssh/prophesee/id_ed25519.pub

        # Extract VPN configuration
        [[ -f ~/openvpn.config ]] || pass prophesee/vpn/openvpn.config > ~/openvpn.config

    # ============================================================================
    # OPTIONAL APPLICATIONS
    # ============================================================================
    - description: == Install Spotify ==
      stdout: true
      command: sudo snap install spotify

    - description: == Install AWS CLI ==
      stdout: true
      command: sudo snap install aws-cli --classic

    - description: == Install Slack ==
      stdout: true
      stderr: true
      command: |
        if ! command -v slack >/dev/null 2>&1; then
          SLACK_DEB="/tmp/slack.deb"
          curl --fail --silent --show-error --location \
            "https://downloads.slack-edge.com/desktop-releases/linux/x64/4.45.69/slack-desktop-4.45.69-amd64.deb" \
            -o "$SLACK_DEB"
          sudo apt install -y "$SLACK_DEB"
          rm -f "$SLACK_DEB"
        fi
