#! /bin/bash

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi


# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

unset color_prompt force_color_prompt

[[ -x `which powerline-shell` ]] || ( pip3 install powerline-shell && sudo apt install fonts-powerline )
function _update_ps1() {
    EXIT_STATUS=$?
    if command -v powerline-shell 1>/dev/null; then
        PS1=$(powerline-shell $EXIT_STATUS)
    fi
}

if [[ $TERM != linux && ! $PROMPT_COMMAND =~ _update_ps1 ]]; then
    PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"
elif [ "$color_prompt" = yes ] && command -v __git_ps1 1>/dev/null; then
    PS1="${COLOR_BLUE}\t ${COLOR_GREEN}\u@${COLOR_YELLOW}\h:${COLOR_RED}\w${COLOR_CYAN}\$(__git_ps1)${COLOR_NC}$ ${COLOR_NC}"
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi

[[ -x `which wal` ]] || pip3 install pywal
wal --theme monokai --vte 

#cat ~/.cache/wal/sequences
source ~/.cache/wal/colors.sh
